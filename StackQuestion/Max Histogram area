class Solution {
    public int largestRectangleArea(int[] heights) {
        int len = heights.length;
        int left[] = new int[len];
        int right[] = new int[len];

        Stack<Integer> stack = new Stack<>();
        Stack<Integer> stack2 = new Stack<>();

        // Nearest Smaller to left
        for (int i = 0; i < len; i++) {
            if (stack.isEmpty()) {
                left[i] = -1;
            } else if (heights[stack.peek()] < heights[i]) {
                left[i] = stack.peek();
            } else if (heights[stack.peek()] >= heights[i]) {
                while (!stack.isEmpty() && heights[stack.peek()] >= heights[i]) {
                    stack.pop();
                }
                if (stack.isEmpty()) {
                    left[i] = -1;
                } else {
                    left[i] = stack.peek();
                }
            }
            stack.push(i);
        }

        // Nearest Smaller to right
        for (int i = len - 1; i >= 0; i--) {
            if (stack2.isEmpty()) {
                right[i] = len;
            } else if (heights[stack2.peek()] < heights[i]) {
                right[i] = stack2.peek();
            } else if (heights[stack2.peek()] >= heights[i]) {
                while (!stack2.isEmpty() && heights[stack2.peek()] >= heights[i]) {
                    stack2.pop();
                }
                if (stack2.isEmpty()) {
                    right[i] = len;
                } else {
                    right[i] = stack2.peek();
                }
            }
            stack2.push(i);
        }

        int width[] = new int[len];
        for (int i = 0; i < len; i++) {
            width[i] = right[i] - left[i] - 1;
        }
        int max = Integer.MIN_VALUE;

        for (int i = 0; i < len; i++) {
            int a = width[i] * heights[i];
            max = Math.max(max, a);
        }
        return max;
    }
}
