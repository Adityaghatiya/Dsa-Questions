class Solution {
   public int maxArea(int M[][], int n, int m) {
    // add code here.
    int maxArea = 0;
    int[] heights = new int[m];
    
    for (int i = 0; i < n; i++) {
        // Update heights based on the current row
        for (int j = 0; j < m; j++) {
            if (M[i][j] == 0) {
                heights[j] = 0;
            } else {
                heights[j] += 1;
            }
        }
        // Compute the maximum area for the current row
        maxArea = Math.max(maxArea, Mah(heights));
    }
    
    return maxArea;
}

   public int Mah(int arr[]) {
    int len = arr.length;

    Stack<Integer> stack = new Stack<Integer>();
    Stack<Integer> stack2 = new Stack<Integer>();

    int left[] = new int[len];
    int right[] = new int[len];

    // Nearest smaller to right
    for (int i = 0; i < len; i++) {
        if (stack.isEmpty()) {
            left[i] = -1;
        } else if (arr[stack.peek()] < arr[i]) {
            left[i] = stack.peek();
        } else if (arr[stack.peek()] >= arr[i]) {
            while (!stack.isEmpty() && arr[stack.peek()] >= arr[i]) {
                stack.pop();
            }
            if (stack.isEmpty()) {
                left[i] = -1;
            } else {
                left[i] = stack.peek();
            }
        }
        stack.push(i);
    }
    // Nearest element to right

    for (int i = len - 1; i >= 0; i--) {
        if (stack2.isEmpty()) {
            right[i] = -1;
        } else if (arr[stack2.peek()] < arr[i]) {
            right[i] = stack2.peek();
        } else if (arr[stack2.peek()] >= arr[i]) {
            while (!stack2.isEmpty() && arr[stack2.peek()] >= arr[i]) {
                stack2.pop();
            }
            if (stack2.isEmpty()) {
                right[i] = -1;
            } else {
                right[i] = stack2.peek();
            }
        }
        stack2.push(i);
    }
    int width[] = new int[len];
    for (int i = 0; i < len; i++) {
        width[i] = right[i] - left[i];
    }
    int max = Integer.MIN_VALUE;
    for (int i = 0; i < len; i++) {
        int a = width[i] * arr[i];
        max = Math.max(max, a);
    }
    return max;
}
}
